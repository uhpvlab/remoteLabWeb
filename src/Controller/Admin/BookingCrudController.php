<?php

namespace App\Controller\Admin;

use App\Entity\Booking;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class BookingCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Booking::class;
    }


    public function configureCrud(Crud $crud): Crud
    {
        return parent::configureCrud($crud); // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        return [
//            IdField::new('id'),
            AssociationField::new('user'),
            DateTimeField::new('bookingTime'),
            DateTimeField::new('endTime'),
            ChoiceField::new('labSet')
                ->setChoices(Booking::labSets)
                ->setRequired(true)
                ->allowMultipleChoices(true)            ,


            ChoiceField::new('duration')
                ->setChoices(Booking::durationChoices)
                ->setRequired(true),

            ChoiceField::new('visibility')
                ->setChoices([
                    'public' => 'public',
                    'private' => 'private',
                    'shared' => 'shared',
                ])
                ->setRequired(true),
                TextField::new('description')->setHelp('Help others find and know what your experiment is about.')

        ];
    }




    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub
    }

}
